-- Initialize Camlock with default values
local Camlock = defaultCamlock

-- Function to safely access nested fields
local function safeGet(tbl, keys)
    for _, key in ipairs(keys) do
        if type(tbl) ~= "table" or tbl[key] == nil then
            return nil
        end
        tbl = tbl[key]
    end
    return tbl
end

-- Function to print the color settings
local function printColorSettings()
    local Color = getgenv().Color
    if not Color then
        return
    end

    print("Color Settings:")
    print("Enabled:", Color.Enabled)
    print("Brightness:", Color.Brightness)
    print("Contrast:", Color.Contrast)
    print("Saturation:", Color.Saturation)
end

-- Function to apply color settings (hypothetical)
local function applyColorSettings()
    local Color = getgenv().Color
    if not Color or not Color.Enabled then
        return
    end

    -- Adjust Brightness
    game.Lighting.Brightness = Color.Brightness

    -- Adjust Contrast (hypothetical example as Roblox does not have direct contrast setting)
    -- You might need to use ColorCorrectionEffect for such adjustments
    local colorCorrection = Instance.new("ColorCorrectionEffect")
    colorCorrection.Contrast = Color.Contrast
    colorCorrection.Parent = game.Lighting

    -- Adjust Saturation
    colorCorrection.Saturation = Color.Saturation
end

-- Call the function to print the color settings
printColorSettings()

-- Call the function to apply the color settings
applyColorSettings()

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Variables
local targetPlayer = nil
local isCamlockToggled = false

-- Easing functions
local function lerp(a, b, t)
    return a + (b - a) * t
end

local easingFunctions = {
    ['Linear'] = function(t) return t end,
    ['Sine'] = function(t) return 1 - math.cos((t * math.pi) / 2) end,
    ['Quad'] = function(t) return t * t end,
    -- Add more easing functions as needed
}

-- Function to get the closest player within the radius
local function getClosestPlayer()
    local camlockOptions = safeGet(Camlock, {"CamlockOptions"})
    if not camlockOptions then
        return nil
    end

    local closestPlayer = nil
    local shortestDistance = camlockOptions.Radius
    local mousePosition = UserInputService:GetMouseLocation()

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and (not safeGet(Camlock, {"Checks"}) or not Camlock.Checks.TeamCheck or player.Team ~= LocalPlayer.Team) then
            local character = player.Character
            if character and character:FindFirstChild(camlockOptions.Hitbox) then
                local hitbox = character[camlockOptions.Hitbox]
                local screenPoint = Camera:WorldToScreenPoint(hitbox.Position)
                local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - mousePosition).Magnitude

                if distance < shortestDistance then
                    closestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer
end

-- Function to aim at the specified player
local function aimAtPlayer(target)
    local camlockOptions = safeGet(Camlock, {"CamlockOptions"})
    if not camlockOptions or not target then
        return
    end

    local character = target.Character
    if not character or not character:FindFirstChild(camlockOptions.Hitbox) then
        return
    end

    local hitbox = character[camlockOptions.Hitbox]
    local targetPosition = hitbox.Position
    local targetPositionOnScreen = Vector2.new(Camera:WorldToScreenPoint(targetPosition).X, Camera:WorldToScreenPoint(targetPosition).Y)
    local mousePosition = UserInputService:GetMouseLocation()

    local smoothing = safeGet(Camlock, {"Smoothing"})
    local t = safeGet(smoothing, {"SmoothingAmount"}) * safeGet(smoothing, {"SmoothingSpeed"})
    t = math.clamp(t, 0, 1)
    local targetCFrame = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + (hitbox.Position - Camera.CFrame.Position).Unit)
    Camera.CFrame = Camera.CFrame:lerp(targetCFrame, t)

    -- Optionally, you can apply further interpolation or easing here if needed
end

-- Function to toggle aimlock
local function toggleAimlock()
    local checks = safeGet(Camlock, {"Checks"})
    local camlockOptions = safeGet(Camlock, {"CamlockOptions"})
    if not checks or not camlockOptions then
        return
    end

    if checks.ToggleHoldMode == "Toggle" then
        isCamlockToggled = not isCamlockToggled
    elseif checks.ToggleHoldMode == "Hold" then
        isCamlockToggled = true
    end

    if isCamlockToggled then
        targetPlayer = getClosestPlayer()
    else
        targetPlayer = nil
    end
end

-- Function to update aim based on aimlock status
local function updateAim()
    local checks = safeGet(Camlock, {"Checks"})
    local camlockOptions = safeGet(Camlock, {"CamlockOptions"})
    if not checks or not camlockOptions then
        return
    end

    if isCamlockToggled and checks.StickyAim then
        if not targetPlayer or not targetPlayer.Parent then
            targetPlayer = getClosestPlayer()
        elseif targetPlayer then
            aimAtPlayer(targetPlayer)
        end
    elseif not checks.StickyAim then
        targetPlayer = getClosestPlayer()
        if targetPlayer then
            aimAtPlayer(targetPlayer)
        end
    end
end

-- Function to handle key press events
local function onKeyPress(input, gameProcessedEvent)
    if gameProcessedEvent then
        return
    end

    local camlockOptions = safeGet(Camlock, {"CamlockOptions"})
    if not camlockOptions then
        return
    end

    if input.KeyCode == camlockOptions.Keybind then
        toggleAimlock()
    end
end

-- Function to handle key release events
local function onKeyRelease(input, gameProcessedEvent)
    if gameProcessedEvent then
        return
    end

    local checks = safeGet(Camlock, {"Checks"})
    local camlockOptions = safeGet(Camlock, {"CamlockOptions"})
    if not checks or not camlockOptions then
        return
    end

    if input.KeyCode == camlockOptions.Keybind and checks.ToggleHoldMode == "Hold" then
        isCamlockToggled = false
        targetPlayer = nil
    end
end

-- Connect functions to events
RunService.RenderStepped:Connect(updateAim)
UserInputService.InputBegan:Connect(onKeyPress)
UserInputService.InputEnded:Connect(onKeyRelease)

-- Optional: Show a notification to the player when the script starts
if getgenv()['NotificationOnInject'] then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Aimlock Script",
        Text = "Press " .. (Camlock.CamlockOptions and Camlock.CamlockOptions.Keybind.Name or "") .. " to toggle aimlock.",
        Duration = 5,
    })
end

-- Expose settings using getgenv()
getgenv()['PredictionAmount'] = safeGet(Camlock, {"AimbotSettings", "PredictionAmount"}) or 0
getgenv()['AimbotStrengthAmount'] = safeGet(Camlock, {"AimbotSettings", "AimbotStrengthAmount"}) or 0
getgenv()['Keybind'] = safeGet(Camlock, {"CamlockOptions", "Keybind"}) or Enum.KeyCode.Unknown
getgenv()['EasingStyle'] = safeGet(Camlock, {"Smoothing", "EasingStyle"}) or "Linear"
getgenv()['Hitbox'] = safeGet(Camlock, {"CamlockOptions", "Hitbox"}) or ""
getgenv()['StickyAim'] = safeGet(Camlock, {"Checks", "StickyAim"}) or false
getgenv()['SmoothingAmount'] = safeGet(Camlock, {"Smoothing", "SmoothingAmount"}) or 0
getgenv()['SmoothingSpeed'] = safeGet(Camlock, {"Smoothing", "SmoothingSpeed"}) or 0
getgenv()['SmoothingStyle'] = safeGet(Camlock, {"Smoothing", "SmoothingStyle"}) or "Linear"
getgenv()['HumanizeMovements'] = safeGet(Camlock, {"Smoothing", "HumanizeMovements"}) or false
getgenv()['RandomizeMovements'] = safeGet(Camlock, {"Smoothing", "RandomizeMovements"}) or false
getgenv()['AdaptiveSmoothing'] = safeGet(Camlock, {"Smoothing", "AdaptiveSmoothing"}) or false
getgenv()['Interpolation'] = safeGet(Camlock, {"Smoothing", "Interpolation"}) or false
getgenv()['PingCompensation'] = safeGet(Camlock, {"Smoothing", "PingCompensation"}) or false
getgenv()['ToggleHoldMode'] = safeGet(Camlock, {"Checks", "ToggleHoldMode"}) or "Toggle"
getgenv()['Enabled'] = safeGet(Camlock, {"Checks", "Enabled"}) or false
getgenv()['UsePrediction'] = safeGet(Camlock, {"AimbotSettings", "UsePrediction"}) or false
